Docker Guide



===================================================================================================================================================================
------------------------------------------------------------------------------------------

Containers vs Virtual Machines

Both containers and virtual machines are used to run applications in isolated environments, but they differ in a few key ways:

Feature		->	Containers			Virtual Machines
Kernel Sharing	->	Shares the host OS kernel	Each VM has its own OS kernel
Size		->	Lightweight (MBs)		Heavy (GBs)
Startup Time	->	Seconds				Minutes
Performance	->	High				Moderate (resource-intensive)


Docker uses the host OS kernel and isolates the application environment using features like namespaces and cgroups in Linux. This makes containers lightweight and efficient.


What is a Container 
• A way to package an application with all the necessary dependencies and configuration
• Portable Artifact, easily shared and moved around 
• Makes development more efficient 
• A container is a running environment for an Image

Technically 
• A Container is layers of stacked images
• At the base is usually Linux Base Image, small in size
• Application image on top


Docker Toolbox 
A tool which abstracts away the OS kernel layer to make it possible for your host to run different docker images


============================================================================================

Core Concepts


 - Dockerfile:
This is a text file that contains a set of instructions for creating a Docker image.
Think of it as the recipe for creating your application’s environment.


 - Image:
An image is a snapshot of an application’s environment, built using a Dockerfile. 
Images are read-only and can be shared with others through Docker Hub or private repositories.


 - Container:
A container is a running instance of an image. 
A container is the running environment of an image
It’s where your application lives and operates. Containers are isolated from one another but share the host OS kernel.


 - Volumes:
Volumes are used to persist data outside of containers. 
Without volumes, any data inside a container would be lost once the container stops.


 - Docker Hub:
This is a public repository where you can find and share Docker images. 


============================================================================================

Getting Started with Docker on Linux Ubuntu Server

Correct Steps to Install Docker on Ubuntu Server

1. Check Linux Version
 - lsb_release -a


2. Update Package Information
 - sudo apt-get update


3. Uninstall Old Versions 
 - for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done


4. Set Up Docker’s Official APT Repository

Install necessary dependencies:
 - sudo apt-get install ca-certificates curl

Add Docker’s GPG key:
 - sudo install -m 0755 -d /etc/apt/keyrings
 - sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
 - sudo chmod a+r /etc/apt/keyrings/docker.asc

Add the Docker repository to your APT sources list:
echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
$(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


Update APT with the new repository:
 - sudo apt-get update


5. Install Docker Engine
 - sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

6. Enable Docker to Start on Boot
 - sudo systemctl enable docker

7. Start Docker Service (If Not Running)
 - sudo systemctl start docker

Check if Docker is running:
 - sudo systemctl status docker

8. Test Docker Installation
 - sudo docker run hello-world


9. Optional: Run Docker Without Sudo
By default, Docker requires sudo to run. 
To allow your user to run Docker commands without sudo, 
you can add your user to the Docker group:

 - sudo usermod -aG docker $USER


---------------------------------------------
Manage Linux servers remotely

1. Open PowerShell on your Windows laptop.
2. Run an SSH command (ssh tk@172.168.0.81).
		     	-> username@IP address of your Ubuntu server

3. Your Windows laptop connects to your Ubuntu server inside Proxmox.
4. Now, everything you type in PowerShell runs on your Ubuntu server.
5. You are remotely controlling your Ubuntu server from your Windows machine.
6. To exit, type exit, and you’ll return to Windows PowerShell.

Remotely connecting to an already running instance of your Ubuntu server inside Proxmox


=========================================
Steps to Deploy WordPress

Step 1: Pull the Required Docker Images
 - sudo docker pull mysql:5.7
 - sudo docker pull wordpress:latest


Step 2: Start the MySQL Container

sudo docker run -d \
  --name wordpress-db \
  -e MYSQL_ROOT_PASSWORD=rootpassword \
  -e MYSQL_DATABASE=wordpress \
  -e MYSQL_USER=wordpressuser \
  -e MYSQL_PASSWORD=wordpresspass \
  -v wordpress_db_data:/var/lib/mysql \
  mysql:5.7

-d → Runs the container in the background.
--name wordpress-db → Assigns a custom name to the database container.
-e → Sets environment variables for database credentials.
-v wordpress_db_data:/var/lib/mysql → Ensures database persistence.



Step 3: Start the WordPress Container
sudo docker run -d \
  --name wordpress \
  --link wordpress-db:mysql \
  -e WORDPRESS_DB_HOST=wordpress-db:3306 \
  -e WORDPRESS_DB_USER=wordpressuser \
  -e WORDPRESS_DB_PASSWORD=wordpresspass \
  -e WORDPRESS_DB_NAME=wordpress \
  -p 8080:80 \
  -v wordpress_data:/var/www/html \
  wordpress:latest


--link wordpress-db:mysql → Connects WordPress to the MySQL container.
-p 8080:80 → Maps port 80 inside the container to port 8080 on your server.
-v wordpress_data:/var/www/html → Ensures WordPress files persist.


Step 4: Verify Containers Are Running
sudo docker ps


Step 5: Access Your WordPress Site
http://<Your-Ubuntu-Server-IP>:8080


---------------------------------------------
Managing the Containers

Stop WordPress and MySQL
sudo docker stop wordpress wordpress-db

Restart them
sudo docker start wordpress wordpress-db

Remove them (if needed)
sudo docker rm -f wordpress wordpress-db

Check logs
sudo docker logs -f wordpress






============================================================================================

Docker Commands 


Docker has a variety of commands, but here are the essentials to get started:

• Docker build -t my-image . 
Build an Image from a Dockerfile:

• Docker images
Checks current existing images

• Docker pull (image-name)
Pull an Image:


• Docker run (image-name)
Run/Create a new container from an image
Start the image in a container, container is the running environment of an image 

• Docker run -d (image-name)
Starts new container with a command 
-d detached mode, run the container in detached mode, run the terminal again


• Docker ps
Lists the running containers

• Docker ps -a
Lists all the containers, running and !not running/ stopped


• Docker stop (container ID)
Stops the container 

• Docker start (container ID)
Starts the stopped container 
Working with containers not images

• Docker rm (container ID)
Remove a Container


• Docker run -p(Host port : container port) -d (image-name)
Run a Container with Port Mapping:
-p Port binding - bind port of host to container 


• Docker run -v <host_path>:<container_path> <image_name>
Mount a Volume:


Debugging Commands

• Docker logs (container ID)
See logs of container 

• Docker run -d -p6000:6379 --name  newContainername image-name:tag
Name a container 

• Docker exec -it (container ID/name) /bin/bash
Get the terminal of the running container
Inside of container as root user


---------------------------------------------

RUN DOCKER CONTAINER 

## start mongodb

docker run -d \					   docker run -d
-p 27017:27017 \				-p (Host port : container port) 
-e MONGO_INITDB_ROOT_USERNAME=admin \		-e (environment variable)
-e MONGO_INITDB_ROOT_PASSWORD=password \	-e (environment variable)
-- net mongo-network \				--net network name
-- name mongodb \				--name container name
mongo						   image-name : tag


---------------------------------------------

DOCKER COMPOSE FILE

version: '3'
services:
    mongodb :
	image: mongo
	ports:
	- 27017:27017
	environment:
	- MONGO_INITDB_ROOT_USERNAME=admin
	- MONGO_INITDB_ROOT_PASSWORD=password

    mongo-express :
	image: mongo-express
	ports:
	  - 8080:8081
	environment:
	  - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
	  - ME_CONFIG_MONGODB_ADMINPASSWORD=password
	  - ME_CONFIG_MONGODB_SERVER=mongodb


Indentation in Yaml!!!


===================================================================================================================================================================





===================================================================================================================================================================




