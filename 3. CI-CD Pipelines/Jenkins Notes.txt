# **Jenkins: Beginner to Advanced Guide**

## **1. Introduction to Jenkins**
Jenkins is an open-source automation server used for **Continuous Integration (CI)** and **Continuous Deployment (CD)**. It helps automate software development processes such as **building, testing, and deploying applications**.

### **Key Features:**
- **Open-source and Java-based**: Easily customizable and scalable.
- **Supports CI/CD pipeline automation**: Ensures frequent and reliable code integration.
- **Extensive plugin ecosystem**: Over **1,800 plugins** available for integrations (Git, Docker, Kubernetes, AWS, Azure, etc.).
- **Web-based User Interface (UI)**: Simplifies job creation and monitoring.
- **Master-Agent Architecture**: Supports distributed builds for scalability.

---

## **2. Installing Jenkins**

### **Prerequisites:**
- **Java (JDK 11 or later)** installed
- A machine running **Linux, Windows, or macOS**
- **Stable internet connection** for downloading packages and plugins

### **Installation on Ubuntu/Debian:**
```bash
sudo apt update
sudo apt install openjdk-11-jdk -y
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt update
sudo apt install jenkins -y
sudo systemctl start jenkins
sudo systemctl enable jenkins
```

### **Accessing the Jenkins Web UI:**
1. Open a browser and go to: `http://<your-server-ip>:8080`
2. Retrieve the initial admin password:
   ```bash
   sudo cat /var/lib/jenkins/secrets/initialAdminPassword
   ```
3. Install **suggested plugins** and create an admin user.

---

## **3. Jenkins Architecture**
### **Main Components:**
1. **Master Node**: Controls Jenkins and distributes jobs.
2. **Worker Nodes (Agents)**: Execute assigned jobs.
3. **Jobs/Pipelines**: Define CI/CD workflows.
4. **Plugins**: Extend functionality (e.g., Git, Docker, Kubernetes).
5. **Artifacts**: Built files generated after job execution.

---

## **4. Creating Jobs in Jenkins**

### **Types of Jenkins Jobs:**
- **Freestyle Project**: Simple job configuration.
- **Pipeline**: Uses scripts to define the CI/CD process.
- **Multi-Configuration Project**: Supports different build configurations.
- **Multi-Branch Pipeline**: Automates CI/CD for multiple branches in Git.

### **Creating a Freestyle Job:**
1. Navigate to **Jenkins Dashboard > New Item**.
2. Enter a job name and select **Freestyle Project**.
3. Configure:
   - **Source Code Management (SCM)**: Git, SVN, etc.
   - **Build Triggers**: Webhooks, Poll SCM, Manual, etc.
   - **Build Steps**: Shell scripts, Maven, Gradle, etc.
   - **Post-Build Actions**: Archive artifacts, deploy to servers.
4. Save and build the job.

---

## **5. Jenkins Pipelines**
Jenkins pipelines automate CI/CD workflows using code.

### **Two Types of Pipelines:**
1. **Declarative Pipeline**: Uses a structured syntax.
2. **Scripted Pipeline**: Uses Groovy scripting for flexibility.

### **Example of a Declarative Pipeline (`Jenkinsfile`):**
```groovy
pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/example/repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
            }
        }
    }
}
```
- `agent any`: Runs on any available agent.
- `stages`: Defines multiple steps (Checkout, Build, Test, Deploy).
- `steps`: Commands executed in each stage.

### **Running a Pipeline Job:**
1. **Jenkins Dashboard > New Item**.
2. Choose **Pipeline**, name the job, and configure.
3. Add a **Pipeline Script** or reference a **Jenkinsfile** in Git.
4. Save and build.

---

## **6. Jenkins Plugins**
Plugins extend Jenkins' functionality.

### **Popular Plugins:**
- **Git Plugin**: Enables Git integration.
- **Pipeline Plugin**: Enables Jenkins pipelines.
- **Docker Plugin**: Runs builds inside containers.
- **Kubernetes Plugin**: Deploys workloads to Kubernetes.
- **Blue Ocean**: Provides a modern UI for pipeline visualization.

### **Installing Plugins:**
1. Navigate to **Manage Jenkins > Manage Plugins**.
2. Search for and install the plugin.
3. Restart Jenkins if required.

---

## **7. Jenkins Integration with GitHub**
### **Connecting Jenkins with GitHub:**
1. Install **Git Plugin**.
2. Generate a **GitHub Personal Access Token** for authentication.
3. Configure a **Webhook** in GitHub to trigger builds.
4. In Jenkins, configure **Source Code Management** as Git.
5. Under **Build Triggers**, enable **GitHub hook trigger for GITScm polling**.

---

## **8. Running Jenkins in Docker**

### **Run Jenkins in a Docker Container:**
```bash
docker run -d -p 8080:8080 -p 50000:50000 --name jenkins \
  -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts
```

### **Using Docker in a Pipeline:**
```groovy
pipeline {
    agent {
        docker { image 'maven:3.8.3' }
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
    }
}
```

---

## **9. Jenkins Best Practices**
- Use **Pipelines** instead of Freestyle Jobs.
- Store **Jenkinsfiles** in **Git repositories**.
- Use **Declarative Pipelines** for better maintainability.
- Set up **Role-Based Access Control (RBAC)**.
- Regularly **update Jenkins and plugins**.
- Enable **backup and disaster recovery**.
- Use **agents/nodes** to distribute workloads.

---

## **10. Jenkins Troubleshooting**
### **Common Issues & Fixes:**
1. **Jenkins not starting?**
   ```bash
   sudo systemctl status jenkins
   sudo journalctl -u jenkins --no-pager | tail -50
   ```
   - Check logs for errors.
   - Verify Java installation.

2. **Pipeline errors?**
   - Check pipeline syntax using: `jenkins.io/doc/pipeline/tour/testing/`.
   - Debug Groovy syntax.

3. **Build failures?**
   - Check console logs.
   - Verify environment variables.
   - Ensure dependencies are installed.

---

## **11. Next Steps**
- Learn **Jenkinsfile** syntax in depth.
- Build real-world **CI/CD pipelines**.
- Integrate with **Docker, Kubernetes, Ansible, and Terraform**.
- Explore **GitHub Actions and Azure DevOps** for cloud-native CI/CD.

ðŸš€ Happy Learning!

